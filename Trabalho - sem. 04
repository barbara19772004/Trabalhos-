1- Python: é uma linguagem que funciona para criar uma grande variedade de aplicações diferentes, possui uma linguagem interpretada, o que significa que ela não precisa passar pelo processo de compilação. O processo de interpretação é executado dentro de máquinas virtuais, nas quais o código passa por uma camada intermediária que irá traduzir os comandos de programa para código binário. Um exemplo de código python utilizando o direito: 

def checa_competencia(crime):
    crimes_contra_vida = ["homicídio doloso", "homicídio", "aborto", "feminicídio", "homicídio qualificado", "participação em suicídio", "infanticídio"]

    if crime in crimes_contra_vida:
        print(f"{crime} deve ser julgado pelo Tribunal do Júri!")
    else:
        print(f"{crime} deve ser julgado por um juiz togado.")


crime = "Feminicídio"
checa_competencia(crime)

"Feminicídio deve ser julgado pelo Tribunal do Júri!"

JavaScript: No JavaScript, as instruções são chamadas de declaração e são separadas por um ponto e vírgula (;). Espaços, tabulação e uma nova linha são chamados de espaços em branco. O código fonte dos scripts em JavaScript é lido da esquerda para a direita e é convertido em uma sequência de elementos de entrada como símbolos, caracteres de controle, terminadores de linha, comentários ou espaço em branco. ECMAScript também define determinadas palavras-chave e literais, e tem regras para inserção automática de ponto e vírgula ( ASI ) para terminar as declarações. No entanto, recomenda-se sempre adicionar ponto e vírgula no final de suas declarações; isso evitará alguns imprevistos. Para obter mais informações, consulte uma referência detalhada sobre a gramática léxica do JavaScript. O mesmo exemplo acima em java ficaria:

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Competencia {

    public static void checaCompetencia(String crime) {
        List<String> crimesContraVida = new ArrayList<>(Arrays.asList(
            "homicídio doloso", "homicídio", "aborto", "feminicídio", 
            "homicídio qualificado", "participação em suicídio", "infanticídio"
        ));

        if (crimesContraVida.contains(crime)) {
            System.out.println(crime + " deve ser julgado pelo Tribunal do Júri!");
        } else {
            System.out.println(crime + " deve ser julgado por um juiz togado.");
        }
    }

    public static void main(String[] args) {
        String crime = "feminicídio";
        checaCompetencia(crime);
    }
}

C++: possibilita ao desenvolvedor separar a interface de uma classe de sua implementação. Esta padronização, além de facilitar a modificação dos programas, permite com que qualquer cliente que queira usar uma determinada classe apenas inclua a sua interface, não expondo o acesso direto ao código-fonte. 

include <iostream>
include <vector>
include <string>
include <algorithm>

using namespace std;

void checaCompetencia(string crime) {
    vector<string> crimesContraVida = {
        "homicídio doloso", "homicídio", "aborto", "feminicídio", 
        "homicídio qualificado", "participação em suicídio", "infanticídio"
    };

    if (find(crimesContraVida.begin(), crimesContraVida.end(), crime) != crimesContraVida.end()) {
        cout << crime << " deve ser julgado pelo Tribunal do Júri!" << endl;
    } else {
        cout << crime << " deve ser julgado por um juiz togado." << endl;
    }
}

int main() {
    string crime = "feminicídio";
    checaCompetencia(crime);
    return 0;
}

